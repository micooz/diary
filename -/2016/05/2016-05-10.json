{"data":"\u003Ch1 id=\"webpack-dev-server-\"\u003Ewebpack-dev-server最佳实践\u003C\u002Fh1\u003E\n\u003Ch2 id=\"-\"\u003E简述\u003C\u002Fh2\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fwebpack\u002Fwebpack-dev-server\"\u003Ewebpack-dev-server\u003C\u002Fa\u003E 是用express和websocket实现的一套在开发环境下前端自动更新的工具。\u003C\u002Fp\u003E\n\u003Cp\u003Ewebpack-dev-server提供CLI接口，读取传入的webpack.config.js配置文件，根据webpack配置，建立一个静态服务器，供前端加载静态资源，其中有一个关键附加脚本是 \u003Ccode\u003Ewebpack-dev-server.js\u003C\u002Fcode\u003E，位于PATH根路径，即 \u003Ccode\u003E\u002Fwebpack-dev-server.js\u003C\u002Fcode\u003E，其中存放着websocket客户端。\u003C\u002Fp\u003E\n\u003Ch2 id=\"-\"\u003E一般使用方法\u003C\u002Fh2\u003E\n\u003Cp\u003E可以通过下面的命令运行webpack-dev-server：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003E$ node node_modules\u002F.bin\u002Fwebpack-dev-server --config webpack\u002Fdev.config.js --inline --profile --colors --watch --display-error-details --display-cached\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E参数说明参考：\u003Ca href=\"http:\u002F\u002Fwebpack.github.io\u002Fdocs\u002Fwebpack-dev-server.html#webpack-dev-server-cli\"\u003E这里\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E执行后会自动运行webpack进行打包等一系列操作。\u003C\u002Fp\u003E\n\u003Cp\u003E在webpack配置文件中只需添加一个 \u003Ccode\u003EdevServer\u003C\u002Fcode\u003E 配置项即可定义webpack-dev-server的行为：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"lang-js\"\u003EdevServer: {\n  port: 3000,\n  host: &#39;localhost&#39;,\n  historyApiFallback: true,\n  quiet: false,\n  watchOptions: {\n    aggregateTimeout: 300,\n    poll: 1000\n  }\n},\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E在这个例子中，webpack-dev-server会在本地\u003Cstrong\u003E3000\u003C\u002Fstrong\u003E端口上启动一个静态服务器，服务器serve的目录是webpack的必选配置 \u003Ccode\u003Eoutput.path\u003C\u002Fcode\u003E，这是一个绝对路径。\u003C\u002Fp\u003E\n\u003Ch2 id=\"-\"\u003E一些问题？\u003C\u002Fh2\u003E\n\u003Cp\u003E请考虑下面这个问题：\u003C\u002Fp\u003E\n\u003Cp\u003E我有一个网站项目，分模块，每个模块是一个node项目，且每个模块可以\u003Cstrong\u003E独立存在\u003C\u002Fstrong\u003E（启动，调试，运行），它们有些用到了webpack-dev-server。\u003C\u002Fp\u003E\n\u003Cp\u003E再次强调每个模块相互独立，它们之间的耦合方式只有一种：\u003Cstrong\u003E请求代理\u003C\u002Fstrong\u003E。\u003C\u002Fp\u003E\n\u003Cp\u003E现在假设模块A作为API服务器，监听3000端口；模块B作为应用服务器，要提供资源给浏览器，于是用webpack-dev-server在端口3001的 \u003Ccode\u003E\u002F\u003C\u002Fcode\u003E 上建立了静态服务器。模块B还要从模块A存取数据，那么必定存在从3001跨域请求到3000的问题，消除这个问题有多种解决办法：\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E在A上设置 \u003Ccode\u003EAccess-Control-Allow-Origin\u003C\u002Fcode\u003E 为B的域。\u003C\u002Fli\u003E\n\u003Cli\u003E在A、B上层建立代理服务器，屏蔽端口限制。\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003E不深入讨论上面的方法，现在假设我们\u003Cstrong\u003E采用方法二\u003C\u002Fstrong\u003E解决了跨域请求问题，然后我们再考虑一下接下来的一个问题：\u003C\u002Fp\u003E\n\u003Cp\u003E假设存在模块C，和B十分类似，也属于应用服务器；如果B和C存在同名资源，比如 \u003Ccode\u003Emain.js\u003C\u002Fcode\u003E，访问该资源就会引发冲突，因为两个模块都在 \u003Ccode\u003E\u002F\u003C\u002Fcode\u003E 上建立了静态服务器，而这又符合每个模块可以\u003Cstrong\u003E独立存在\u003C\u002Fstrong\u003E的先决条件：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003E\u002F\u002F B\nhttp:\u002F\u002Flocalhost\u002FB\u002Findex.html\nhttp:\u002F\u002Flocalhost\u002Fmain.js\n\u002F\u002F C\nhttp:\u002F\u002Flocalhost\u002FC\u002Findex.html\nhttp:\u002F\u002Flocalhost\u002Fmain.js \u002F\u002F 哪个 main.js ?\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E解决办法看似很明显：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003E\u002F\u002F B\nhttp:\u002F\u002Flocalhost\u002FB\u002Findex.html\nhttp:\u002F\u002Flocalhost\u002FB\u002Fmain.js\n\u002F\u002F C\nhttp:\u002F\u002Flocalhost\u002FC\u002Findex.html\nhttp:\u002F\u002Flocalhost\u002FC\u002Fmain.js \u002F\u002F everyone is happy\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E但这又破坏了每个模块的独立性，我希望单独启动C时，C总能从 \u003Ccode\u003E\u002F\u003C\u002Fcode\u003E 上获取资源，而不是 \u003Ccode\u003E\u002FC\u002F...\u003C\u002Fcode\u003E 这么冗余。\u003C\u002Fp\u003E\n\u003Ch2 id=\"-\"\u003E最佳实践\u003C\u002Fh2\u003E\n\u003Cp\u003E问题就出在 \u003Ccode\u003Ewebpack-dev-server\u003C\u002Fcode\u003E，它适合作为\u003Cstrong\u003E静态资源服务器\u003C\u002Fstrong\u003E，而不是\u003Cstrong\u003E开发服务器\u003C\u002Fstrong\u003E。因此，我们的开发环境除了需要 \u003Ccode\u003Ewebpack-dev-server\u003C\u002Fcode\u003E，还需要专门的\u003Cstrong\u003E开发服务器\u003C\u002Fstrong\u003E。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003E\u002F\u002F =&gt; Module B\n\u002F\u002F dev server\nhttp:\u002F\u002Flocalhost\u002FB\u002Findex.html\n\u002F\u002F webpack-dev-server for B\nhttp:\u002F\u002Flocalhost:3001\u002F...\n\n\u002F\u002F =&gt; Module C\n\u002F\u002F dev server\nhttp:\u002F\u002Flocalhost\u002FC\u002Findex.html\n\u002F\u002F webpack-dev-server for C\nhttp:\u002F\u002Flocalhost:3003\u002F...\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E每个模块从对应的 \u003Ccode\u003Ewebpack-dev-server\u003C\u002Fcode\u003E 获取资源，解决了冲突又保留了每个模块的独立性。\u003C\u002Fp\u003E\n"}