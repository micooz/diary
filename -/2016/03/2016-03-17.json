{"data":"\u003Ch1 id=\"-js-\"\u003E利用索引提升js的执行效率\u003C\u002Fh1\u003E\n\u003Cp\u003E\u003Cstrong\u003E问题引入：\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E前段时间，有一个任务是需要\u003Cstrong\u003E频繁\u003C\u002Fstrong\u003E在\u003Cstrong\u003E大量的数据\u003C\u002Fstrong\u003E集合中\u003Cstrong\u003E快速定位\u003C\u002Fstrong\u003E并修改某个元素某个字段的值。\u003C\u002Fp\u003E\n\u003Cp\u003E数据结构是\u003Cstrong\u003E数组\u003C\u002Fstrong\u003E，元素的结构可能相当复杂且\u003Cstrong\u003E乱序\u003C\u002Fstrong\u003E。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003E问题分析：\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E假定这个数据集如下：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003E\u002F\u002F array dataset\n[{\n  name: &#39;name1&#39;,\n  body: {\n    metadata: {\n      header: {\n        id: 1 \u002F\u002F unique\n      }\n    }\n  },\n  ...\n}]\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E实际上就是一个\u003Cstrong\u003E查找算法\u003C\u002Fstrong\u003E问题，假设要从1000条数据中查找id为1的元素，最SB做法是直接遍历整个数据集：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"lang-javascript\"\u003Efor(let ele of dataset) {\n  if (ele.body.metadata.header.id === 1) {\n    return ele;\n  }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E最坏的情况是O(n)，当然也可以使用其他常见的查找算法减少遍历次数，但如果要\u003Cstrong\u003E频繁\u003C\u002Fstrong\u003E查找，同步操作会导致页面直接卡死。\u003C\u002Fp\u003E\n\u003Cp\u003E如果有一张\u003Cstrong\u003E哈希表\u003C\u002Fstrong\u003E就帮大忙了，不妨先想想下面这个问题：\u003C\u002Fp\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E在数据库里，为什么给一个字段加个索引就可以极大提升查询效率（通常情况）？\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cp\u003E\u003Cstrong\u003E解决方案：\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E首先理解索引的含义，在js中，数组是线性结构，它的下标可以当成一种索引，通过下标访问元素时间复杂度为O(1)：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"lang-javascript\"\u003Econst db = [1, 2, 3, 4, 5, ...];\nconst ele = db[2]; \u002F\u002F very quick\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E对于一个Object，同样的：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"lang-javascript\"\u003Econst obj = {\n  col1: 1,\n  col2: 2,\n  ...\n};\nconst col2 = obj[&#39;col2&#39;]; \u002F\u002F very quick\nconst col2 = obj.col2; \u002F\u002F very quick\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E再看看最开始的那个问题，如果我们可以：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"lang-javascript\"\u003Econst id = 1;\nconst ele = dataset[id]; \u002F\u002F very quick\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E实现这个效果实际上就要\u003Cstrong\u003E建立索引\u003C\u002Fstrong\u003E，此时的 \u003Ccode\u003Edataset\u003C\u002Fcode\u003E 显然已经不能是最原始的数组了。当id不是数字的时候，\u003Ccode\u003Edataset\u003C\u002Fcode\u003E 也不能是数组，\n那么Object就理所当然地充当js里的HashMap了（ES6中已经有标准的\u003Ca href=\"http:\u002F\u002Fes6.ruanyifeng.com\u002F#docs\u002Fset-map#Map\"\u003EMap\u003C\u002Fa\u003E实现）。\u003C\u002Fp\u003E\n\u003Cp\u003E编写一个通用的索引创建函数，这个函数可以为一个数组，通过传入的回调函数的返回值创建一个包含所有数据引用的索引对象（Object）：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"lang-javascript\"\u003Econst index = (arr, fn) =&gt; {\n  let indexes = {};\n  for (let it of arr) {\n    const key = fn(it);\n    if (!indexes[key]) {\n      indexes[key] = {};\n    }\n    indexes[key] = it;\n  }\n  return indexes;\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E函数只需要\u003Cstrong\u003E遍历一次数据集\u003C\u002Fstrong\u003E来建立索引。\u003C\u002Fp\u003E\n\u003Cp\u003E用法：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"lang-javascript\"\u003Econst our_index = _index(dataset, ele =&gt; ele.body.metadata.header.id);\n\u002F*\n{\n  &quot;1&quot;: {\n    name: &#39;name1&#39;,\n    body: {\n      metadata: {\n        header: {\n          id: 1 \u002F\u002F unique\n        }\n      }\n    }\n  },\n  &quot;2&quot;: {...},\n  ...\n}\n*\u002F\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E有了这个索引 \u003Ccode\u003Eour_index\u003C\u002Fcode\u003E，就可以愉快的以\u003Cstrong\u003EO(1)\u003C\u002Fstrong\u003E的复杂度来访问任意元素，取出的元素是引用，于是也可以直接对原存储空间的数据进行操作：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"lang-javascript\"\u003E    let ele = our_index[1];\n    \u002F\u002F operation on ele\n    ele.name = &#39;_&#39; + ele.name;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Cstrong\u003E小结\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E原生JavaScript不支持Map数据结构，因此可以通过对象来实现；关键在于如何根据需要建立索引，建立索引的字段必须满足\u003Cstrong\u003E唯一性\u003C\u002Fstrong\u003E。\u003C\u002Fp\u003E\n"}