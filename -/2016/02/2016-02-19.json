{"data":"\u003Ch1 id=\"angular2-input-\"\u003EAngular2 @Input 绑定问题\u003C\u002Fh1\u003E\n\u003Cpre\u003E\u003Ccode\u003E@Component({\n  template: `&lt;child [value]=&quot;bindValue&quot;&gt;&lt;\u002Fchild&gt;`\n})\nclass HomeComponent {\n  bindValue:string = &#39;hello&#39;;\n}\n\n@Component({\n  selector: &#39;child&#39;,\n  template: `...`\n})\nclass ChildComponent{\n  @Input() value;\n\n  ngOnInit(){\n    \u002F\u002F 这里可以取到value的值为&#39;hello&#39;\n    \u002F\u002F 当bindValue动态改变时，此函数不会再次调用，需要在ngOnChanges中手动更新\n  }\n\n  ngOnChanges(changes) {\n    \u002F\u002F this.value = changes[&#39;value&#39;].currentValue;\n    \u002F\u002F ...\n    \u002F\u002F 但是要小心这个函数会被频繁调用，\n    \u002F\u002F 不要做复杂逻辑\n  }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch1 id=\"array-prototype-map-\"\u003EArray.prototype.map 的坑\u003C\u002Fh1\u003E\n\u003Cp\u003Emap回调如果不给出返回值，则默认返回 \u003Ccode\u003Eundefined\u003C\u002Fcode\u003E，\u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FReference\u002FGlobal_Objects\u002FArray\u002Fmap\"\u003EMDN文档\u003C\u002Fa\u003E中似乎并未提到这一点。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003Evar numbers = [1, 4, 9];\nvar roots = numbers.map(n =&gt; {\n  if (n === 4) {\n    return -1;\n  }\n});\n\u002F\u002F [undefined, -1, undefined]\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E"}